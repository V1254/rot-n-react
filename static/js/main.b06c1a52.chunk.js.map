{"version":3,"sources":["Algorithm/index.js","App.js","index.js"],"names":["encryptText","text","shift","split","map","char","match","startIndex","toUpperCase","maxIndex","nextCharCode","charCodeAt","String","fromCharCode","join","App","useState","plain","setPlain","cipher","setCipher","shiftValue","setShiftValue","className","placeholder","value","onChange","e","plainText","target","encryptedText","rotN","parseInt","id","shiftBy","Array","from","length","_","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAuBeA,G,MAvBK,SAACC,EAAMC,GAAP,OAClBD,EACGE,MAAM,IACNC,KAAI,SAACC,GACJ,IAAKA,EAAKC,MAAM,UAAW,OAAOD,EAClC,IAAIE,EAAa,GACbF,IAASA,EAAKG,gBAChBD,EAAa,IAGf,IAAME,EAAWF,EAAa,GAE1BG,EAAeL,EAAKM,WAAW,GAAKT,EAOxC,OALIQ,EAAeD,IACjBC,EAAeH,GAAcG,EAAeD,GAAY,GAG9CG,OAAOC,aAAaH,MAGjCI,KAAK,MC2BKC,MA5Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGuBJ,mBAAS,GAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAmBb,OACE,sBAAKC,UAAU,MAAf,UACE,8CACA,0BACEA,UAAU,aACVC,YAAY,6BACZC,MAAOR,EACPS,SArBmB,SAACC,GACxB,IAAMC,EAAYD,EAAEE,OAAOJ,MACrBK,EAAgBC,EAAKH,EAAWI,SAASX,IAC/CH,EAASU,GACTR,EAAUU,MAmBR,mBAAGP,UAAU,QAAb,oBACA,wBAAQU,GAAG,QAAQR,MAAOJ,EAAYK,SAjBZ,SAACC,GAC7B,IAAMO,EAAUP,EAAEE,OAAOJ,MACnBK,EAAgBC,EAAKd,EAAOe,SAASE,IAC3CZ,EAAcY,GACdd,EAAUU,IAaR,SACGK,MAAMC,KAAK,CAAEC,OAAQ,KAAMjC,KAAI,SAACkC,EAAGC,GAAJ,OAC9B,yBAAQd,MAAOc,EAAQ,EAAvB,iBAA+BA,EAAQ,UAG3C,mBAAGhB,UAAU,QAAb,oBACA,0BACEA,UAAU,gBACVC,YAAY,kCACZC,MAAON,QCrCfqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b06c1a52.chunk.js","sourcesContent":["const encryptText = (text, shift) =>\r\n  text\r\n    .split(\"\")\r\n    .map((char) => {\r\n      if (!char.match(/[a-z]/i)) return char;\r\n      let startIndex = 97;\r\n      if (char === char.toUpperCase()) {\r\n        startIndex = 65;\r\n      }\r\n\r\n      const maxIndex = startIndex + 25;\r\n\r\n      let nextCharCode = char.charCodeAt(0) + shift;\r\n\r\n      if (nextCharCode > maxIndex) {\r\n        nextCharCode = startIndex + (nextCharCode - maxIndex) - 1;\r\n      }\r\n\r\n      const rtn = String.fromCharCode(nextCharCode);\r\n      return rtn;\r\n    })\r\n    .join(\"\");\r\n\r\nexport default encryptText;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport rotN from \"./Algorithm\";\n\nfunction App() {\n  const [plain, setPlain] = useState(\"\");\n  const [cipher, setCipher] = useState(\"\");\n  const [shiftValue, setShiftValue] = useState(1);\n\n  const handleTextChange = (e) => {\n    const plainText = e.target.value;\n    const encryptedText = rotN(plainText, parseInt(shiftValue));\n    setPlain(plainText);\n    setCipher(encryptedText);\n  };\n\n  const handleAlgorithmChange = (e) => {\n    const shiftBy = e.target.value;\n    const encryptedText = rotN(plain, parseInt(shiftBy));\n    setShiftValue(shiftBy);\n    setCipher(encryptedText);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Rot-N cipher</h2>\n      <textarea\n        className=\"cipherText\"\n        placeholder=\"Enter some text to encrypt\"\n        value={plain}\n        onChange={handleTextChange}\n      />\n      <p className=\"arrow\">↓</p>\n      <select id=\"rot-n\" value={shiftValue} onChange={handleAlgorithmChange}>\n        {Array.from({ length: 25 }).map((_, index) => (\n          <option value={index + 1}>Rot-{index + 1}</option>\n        ))}\n      </select>\n      <p className=\"arrow\">↓</p>\n      <textarea\n        className=\"encryptedText\"\n        placeholder=\"Encrypted text will appear here\"\n        value={cipher}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}